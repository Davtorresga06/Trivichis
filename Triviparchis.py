import random
import firebase_admin
from firebase_admin import credentials, db

# --- BASE DE DATOS Y FIREBASE ---
def iniciar_firebase():
    if not firebase_admin._apps:
        cred = credentials.Certificate("clave_firebase.json")
        firebase_admin.initialize_app(cred, {
            'databaseURL': 'https://parchis-de-trivia-default-rtdb.firebaseio.com/'
        })

def crear_partida(partida_id, ubicaciones_tablero):
    ref = db.reference(f'partidas/{partida_id}/ubicacionesTablero')
    ref.set(ubicaciones_tablero)

def agregar_usuario_a_partida(partida_id, usuario_id, nombre, color_ficha, posicion_inicial=0):
    ref = db.reference(f'partidas/{partida_id}/usuarios/{usuario_id}')
    ref.set({
        'nombre': nombre,
        'colorFicha': color_ficha,
        'posicionFicha': posicion_inicial
    })

def actualizar_posicion_usuario(partida_id, usuario_id, nueva_posicion):
    ref = db.reference(f'partidas/{partida_id}/usuarios/{usuario_id}/posicionFicha')
    ref.set(nueva_posicion)

def obtener_posicion_usuario(partida_id, usuario_id):
    ref = db.reference(f'partidas/{partida_id}/usuarios/{usuario_id}/posicionFicha')
    return ref.get()

def obtener_posiciones_todas_las_fichas(partida_id):
    ref = db.reference(f'partidas/{partida_id}/usuarios')
    return ref.get()

# --- TRIVIA - PREGUNTAS ---
PREGUNTAS = {
    "Matem√°ticas": [
        {"pregunta": "¬øCu√°l es el resultado de 8 √ó 7?", "opciones": ["A) 54", "B) 56", "C) 58", "D) 64"], "respuesta": "B"},
        {"pregunta": "¬øQu√© nombre recibe un pol√≠gono de ocho lados?", "opciones": ["A) Hex√°gono", "B) Oct√°gono", "C) Dec√°gono", "D) Hept√°gono"], "respuesta": "B"},
        {"pregunta": "¬øCu√°l es el valor de œÄ (pi) aproximado?", "opciones": ["A) 2.14", "B) 3.14", "C) 3.41", "D) 4.13"], "respuesta": "B"},
        {"pregunta": "Si un tri√°ngulo tiene dos lados iguales, ¬øc√≥mo se llama?", "opciones": ["A) Equil√°tero", "B) Is√≥sceles", "C) Escaleno", "D) Rect√°ngulo"], "respuesta": "B"},
        {"pregunta": "¬øQu√© es el m√≠nimo com√∫n m√∫ltiplo de 6 y 8?", "opciones": ["A) 24", "B) 12", "C) 16", "D) 48"], "respuesta": "A"}
    ],
    "Ciencias Naturales": [
        {"pregunta": "¬øCu√°l es el planeta m√°s grande del sistema solar?", "opciones": ["A) Marte", "B) Saturno", "C) J√∫piter", "D) Urano"], "respuesta": "C"},
        {"pregunta": "¬øQu√© gas es esencial para la respiraci√≥n humana?", "opciones": ["A) Nitr√≥geno", "B) Ox√≠geno", "C) Hidr√≥geno", "D) Di√≥xido de carbono"], "respuesta": "B"},
        {"pregunta": "¬øQu√© √≥rgano del cuerpo humano bombea la sangre?", "opciones": ["A) Pulm√≥n", "B) Est√≥mago", "C) H√≠gado", "D) Coraz√≥n"], "respuesta": "D"},
        {"pregunta": "¬øC√≥mo se llama el cambio de estado de s√≥lido a l√≠quido?", "opciones": ["A) Evaporaci√≥n", "B) Condensaci√≥n", "C) Fusi√≥n", "D) Sublimaci√≥n"], "respuesta": "C"},
        {"pregunta": "¬øCu√°l es la unidad principal de la c√©lula?", "opciones": ["A) N√∫cleo", "B) Citoplasma", "C) Membrana", "D) Mitocondria"], "respuesta": "A"}
    ],
    "Ciencias Sociales": [
        {"pregunta": "¬øQui√©n fue el primer presidente de Estados Unidos?", "opciones": ["A) Abraham Lincoln", "B) George Washington", "C) Thomas Jefferson", "D) John Adams"], "respuesta": "B"},
        {"pregunta": "¬øCu√°l es la capital de Francia?", "opciones": ["A) Roma", "B) Berl√≠n", "C) Par√≠s", "D) Madrid"], "respuesta": "C"},
        {"pregunta": "¬øQu√© civilizaci√≥n construy√≥ las pir√°mides de Egipto?", "opciones": ["A) Griega", "B) Romana", "C) Egipcia", "D) Mesopot√°mica"], "respuesta": "C"},
        {"pregunta": "¬øQu√© d√≠a se celebra la independencia de M√©xico?", "opciones": ["A) 5 de mayo", "B) 16 de septiembre", "C) 20 de noviembre", "D) 1 de octubre"], "respuesta": "B"},
        {"pregunta": "¬øC√≥mo se llama el documento que establece las leyes de un pa√≠s?", "opciones": ["A) Tratado", "B) Constituci√≥n", "C) C√≥digo Penal", "D) Juramento"], "respuesta": "B"}
    ],
    "Literatura": [
        {"pregunta": "¬øQui√©n escribi√≥ Don Quijote de la Mancha?", "opciones": ["A) Gabriel Garc√≠a M√°rquez", "B) Miguel de Cervantes", "C) Pablo Neruda", "D) Mario Vargas Llosa"], "respuesta": "B"},
        {"pregunta": "¬øQu√© es una f√°bula?", "opciones": ["A) Un poema √©pico", "B) Una narraci√≥n de animales con moraleja", "C) Una leyenda hist√≥rica", "D) Una historia sin personajes"], "respuesta": "B"},
        {"pregunta": "¬øQui√©n escribi√≥ Cien a√±os de soledad?", "opciones": ["A) Gabriel Garc√≠a M√°rquez", "B) Julio Cort√°zar", "C) Isabel Allende", "D) Jorge Luis Borges"], "respuesta": "A"},
        {"pregunta": "¬øQu√© tipo de texto es una obra de teatro?", "opciones": ["A) L√≠rico", "B) Narrativo", "C) Dram√°tico", "D) Cient√≠fico"], "respuesta": "C"},
        {"pregunta": "¬øQu√© figura literaria compara dos cosas usando 'como'?", "opciones": ["A) Met√°fora", "B) Hip√©rbole", "C) Personificaci√≥n", "D) S√≠mil"], "respuesta": "D"}
    ],
    "Deportes": [
        {"pregunta": "¬øCu√°ntos jugadores hay en un equipo de f√∫tbol (en cancha)?", "opciones": ["A) 9", "B) 10", "C) 11", "D) 12"], "respuesta": "C"},
        {"pregunta": "¬øQu√© pa√≠s organiza los Juegos Ol√≠mpicos cada 4 a√±os?", "opciones": ["A) Rusia", "B) No es un pa√≠s fijo", "C) Estados Unidos", "D) China"], "respuesta": "B"},
        {"pregunta": "¬øQu√© deporte utiliza raquetas y una red?", "opciones": ["A) Golf", "B) Tenis", "C) Nataci√≥n", "D) Rugby"], "respuesta": "B"},
        {"pregunta": "¬øEn qu√© deporte se usa una canasta?", "opciones": ["A) B√©isbol", "B) F√∫tbol", "C) Baloncesto", "D) Hockey"], "respuesta": "C"},
        {"pregunta": "¬øQu√© pa√≠s ha ganado m√°s Copas del Mundo de f√∫tbol?", "opciones": ["A) Alemania", "B) Italia", "C) Argentina", "D) Brasil"], "respuesta": "D"}
    ]
}

# --- SELECCI√ìN Y PREGUNTA ---
def seleccionar_materia():
    print("üìö Materias disponibles:")
    for i, materia in enumerate(PREGUNTAS.keys(), 1):
        print(f"{i}. {materia}")
    while True:
        try:
            opcion = int(input("Selecciona una materia para esta partida: "))
            materia = list(PREGUNTAS.keys())[opcion - 1]
            print(f"‚úÖ Se jugar√° con preguntas de: {materia}\n")
            return materia
        except (ValueError, IndexError):
            print("‚ùå Selecci√≥n no v√°lida. Intenta nuevamente.")

def hacer_pregunta(materia):
    pregunta = random.choice(PREGUNTAS[materia])
    print(f"\n‚ùì Pregunta de {materia}:\n{pregunta['pregunta']}")
    for opcion in pregunta['opciones']:
        print(opcion)
    respuesta_usuario = input("Tu respuesta (A, B, C o D): ").strip().upper()
    return respuesta_usuario == pregunta['respuesta']

# --- JUEGO ---
def lanzar_dado():
    return random.randint(1, 6)

def registrar_jugadores(partida_id):
    jugadores = []
    while True:
        try:
            cantidad = int(input("üë• ¬øCu√°ntos jugadores van a participar?: "))
            if cantidad > 0:
                break
            else:
                print("‚ö†Ô∏è Debe haber al menos un jugador.")
        except ValueError:
            print("‚ùå Ingresa un n√∫mero v√°lido.")

    for i in range(1, cantidad + 1):
        print(f"\nüî∏ Registro del jugador {i}:")
        nombre = input("üéÆ Nombre: ").strip()
        correo = input("üìß Correo: ").strip()
        color_ficha = input("üé® Color de ficha: ").strip().lower()
        usuario_id = nombre.replace(" ", "_").lower()

        agregar_usuario_a_partida(partida_id, usuario_id, nombre, color_ficha)
        jugadores.append(usuario_id)
        print(f"‚úÖ Jugador '{nombre}' registrado correctamente.\n")
    return jugadores

def mostrar_posiciones(partida_id):
    datos = obtener_posiciones_todas_las_fichas(partida_id)
    print("\nüìç Posiciones actuales:")
    for uid, info in datos.items():
        print(f"üîπ {info['nombre']} ({info['colorFicha']}): Posici√≥n {info['posicionFicha']}")

def main():
    iniciar_firebase()
    partida_id = "partida_demo"

    ubicaciones_tablero = {
        'celdas': {str(i): {'x': i*10, 'y': 0} for i in range(1, 11)},
        'carcel': {'x': 0, 'y': -10},
        'salida': {'x': 0, 'y': 0}
    }
    crear_partida(partida_id, ubicaciones_tablero)

    print("üé≤ BIENVENIDO AL JUEGO DE PARCH√çS - CON TRIVIA")
    materia = seleccionar_materia()
    jugadores = registrar_jugadores(partida_id)
    turno_actual = 0

    while True:
        jugador_id = jugadores[turno_actual]
        print(f"\nüîÅ TURNO DE: {jugador_id.replace('_', ' ').title()}")
        print("1. Lanzar dado üé≤")
        print("2. Ver posiciones de todas las fichas üß©")
        print("3. Salir üö™")

        opcion = input("Elige una opci√≥n: ").strip()

        if opcion == '1':
            dado = lanzar_dado()
            print(f"üé≤ Sacaste un {dado}!")

            actual = obtener_posicion_usuario(partida_id, jugador_id)
            nueva = actual + dado
            if nueva > 10:
                nueva = 10

            posiciones = obtener_posiciones_todas_las_fichas(partida_id)
            ocupante = None
            for otro_id, info in posiciones.items():
                if otro_id != jugador_id and info['posicionFicha'] == nueva:
                    ocupante = otro_id
                    break

            if ocupante:
                print(f"‚ö†Ô∏è La casilla {nueva} ya est√° ocupada por {ocupante.replace('_', ' ').title()}")
                print("Se le har√° una pregunta de trivia para defender su posici√≥n.")
                if hacer_pregunta(materia):
                    print("‚úÖ ¬°Respuesta correcta! El jugador atacante ser√° devuelto a su casilla anterior.")
                    nueva = actual
                else:
                    print("‚ùå Respuesta incorrecta. El jugador avanzar√° como estaba previsto.")

            actualizar_posicion_usuario(partida_id, jugador_id, nueva)
            print(f"‚û°Ô∏è Nueva posici√≥n: {nueva}")

            turno_actual = (turno_actual + 1) % len(jugadores)

        elif opcion == '2':
            mostrar_posiciones(partida_id)

        elif opcion == '3':
            print("üëã Juego finalizado. ¬°Hasta la pr√≥xima!")
            break

        else:
            print("‚ùå Opci√≥n inv√°lida.")

if __name__ == "__main__":
    main()
